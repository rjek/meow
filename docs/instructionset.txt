MEOW Instruction Set
--------------------

B		000c ccca aaaa aaaa	- branch to signed-9 bit offet from current PC, if condition codes match
UNDEF		0001 111i iiii iiii     - bnv UNDEF range

ADD		0011 dddd iiii iiii     - register d = register d + unsigned 8 bit constant
		0010 dddd iiii ssss     - register d = register s + unsigned 4 bit constant
					- if 4-bit immediate on second version is 0,
                                            then dest += source,
                                            otherwise dest = source + immediate

SUB		0101 dddd iiii iiii     - same as above, except subtract.
		0100 dddd iiii ssss

CMP		0110 aaaa iiii iiii	- compare register to 8 bit signed int
CMP		0111 aaaa 0-wx bbbb	- compare two registers, w and x are dest/source banks to read from
TST		0111 aaaa 1-wt tttt	- test a single bit is set, w is bank to read from

MOV		1000 dddd yzwx ssss	- d = s
					- w = destination bank
					- x = source bank
					- y = byte swap
					- z = half word swap

LDI		1001 iiii iiii iiii	- reg_imm = 12 bit signed constant

LSH		101A rrrr dR0i iiii	- shift r by i bits in direction d, roll if R
		101A rrrr dR1- ssss	- shift r by value of register s bits in direction d, roll if R
					- arithmetic shifts if A bit set.

					A == 1  => Arithmetic, else Logical
					d == 1  => Left, else Right
					R == 1  => Roll, else shift

BIT		110N dddd oo0- ssss	- register d = register d OP register s
		110N dddd oo1i iiii	- register d = register d OP 1<<immediate		

		If N is set, second operand is bitwise inverted.

		oo is:	00	NOT	- (ignores current value of reg d)
			01	AND
			10	ORR
			11	EOR

MEM		111L vvvv SHWD aaaa	- L = load/store (1 to store)
                                          S = 8bit/16bit,  (1 for 16 bit)
					  S == 0
					    H = 8bit/32bit, (1 for 32 bit)
					  S == 1
                                            H = hi/low half, (1 for low)
                                          W = writeback, (1 for on)
                                          D = direction (1 for increase)
                                          v = register whose contents to write,
                                              or register to write into
                                          a = address to store or read from

Redundant encodings / spare bits we've spotted
----------------------------------------------

MEM operations when writeback is off has the spare encoding of WD==01 which
the assembler will not encode for now.

LSH operations when shifting by a register has a spare bit (0) in the upper nibble
of the lower byte.

CMP/TST when not comparing with a large constant have a spare bit (2) in the upper
nibble of the lower byte.


UNDEF instruction range
-----------------------

The Branch instruction contains an encoding that is otherwise useless with its NEVER
condition code.  This gives us a 9 bit immediate constant that we can use for special
purpose instuctions, implementation-defined extensions, etc.

What is encoded is a signed instruction offset.  This gives us the range of -512 to
510, even numbers only.  We interpret this bit field such as it is how the decoder
already decodes the data.

Negative values are IMPLEMENTATION DEFINED.  Others are defined by this specification,
and all implementations must provide them.

If a CPU does not implement a requested BNV, then it acts as a no-op.

MEOW-specified BNV calls:
        0               Read CPU model information
                        IR => 1st byte Implementor (0 == us)
			      2nd byte Model (implementor-defined 0 = MSIM, 1 = MEOW1)
			      3rd byte Revision (implementor-defined)
			      4th byte Instruction Set version (this document == 0)

	2               Read CPU bus information
	                IR => xxxx xxxx xxxx xxxx xxxx xxxx xxxi iiii
			      x = undefined
			      i = Bus ID of machine

	4               Return from IRQ mode and swap the banks back.

MSIM-specific BNV calls:
        -2              Quit MSIM with exit code of IR

	-4              Dump machine state to debug output

	-6              Print character in IR to debug output

	-8              Print integer in IR to debug output

	-10             Print integer in IR to debug output as hex

Register layouts
	register        aliases        purpose
	r0 - r10                       general-purpose
        r11             sp             stack pointer / general purpose
        r12             lr             link register / general purpose
        r13             ir             immediate / syscall no. / general purpose
        r14             sr             status bits register
        r15             pc             program counter, points to the next
                                       instruction to be executed.

Status bits register layout
        21098765 43210987 65432109 87654321
	NZCVxxxx xxxxxxxx xxxxxxxx xxxxxxxI

	NZCV = condition codes
	x = currently undefined, write what you read.
	I = set if in interrupt mode (read only)

Program counter layout
	21098765 43210987 65432109 87654321
	aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaax
	
	x == must be zero

Memory layout:

	0	System call entry point / OS inititialisation / CPU initial PC
	...
	32	Interrupt handler
	...
	n	End of ROM


The top nibble of the address is the peripheral selector.
  0 => ROM (Thus rom starts at 0)
  1 => RAM (Thus ram starts at 0x10000000 I.E. 256M in)
  
  f => SYS (system controller including interrupts, MCU ID etc)

When the CPU is interrupted, if it is in interrupt mode it resets. Otherwise it enters interrupt mode.
Entering interrupt mode causes the active bank of registers to switch to the interrupt bank and causes
PC to be loaded with the address of the interrupt handler. To return from interrupt, you execute 
BNV #4 (also known as IRQRTN).

On reset, all registers in both banks are set to zero, the cpu enters interrupt mode and the SYS has interrupts masked.

If the address part of PC is altered in any way the MCU supresses the automatic increment.

To syscall:  (tip: make this a macro called SYS)

		LDI    #SysCallNumber  ; syscall number goes into IR register
		AND    LR, #0          ; quick way of setting LR to zero
		ADD    LR, PC, #4      ; change LR to point after our syscall
		AND    PC, #0          ; set PC to zero (location of syscall handler)

Condition codes
cccc	suffix	What it means			What it is implemented as?

0000	EQ 	Equal 				Z=1
0001	NE 	Not equal			Z=0
0010	CS 	Carry set 			C=1
0010	HS 	Higher/same (unsigned)		Same as CS
0011	CC 	Carry clear 			C=0
0011	LO 	Lower (unsigned)		Same as CC
0100	MI 	Negative			N=1
0101	PL 	Positive			N=0
0110	VS 	Overflow set			V=1
0111	VC 	Overflow clear			V=0
1000	HI 	Higher (unsigned) 		C=1 and Z=0
1001	LS 	Lower or same (unsigned) 	C=0 or Z=1
1010	GE 	Greater than or equal 		N=V
1011	LT 	Less than			N<>V
1100	GT 	Greater than 			N=V and Z=0
1101	LE 	Less than or equal 		N<>V or Z=1
1110	AL	Always				This is the default
1111	NV 	Never				** Do not use **


Memory layout:

   cccccaaa aaaaaaaa aaaaaaaa aaaaaaaa

   c = chipselect, a = address.  Each chipselect is 128MB.

   chipselect 0 is ROM.
   chipselect 1 is RAM.

   chipselect 31 is System Controller.

   System controller:

     0 .. 0x1fff is chip select information table, 32 x 256 byte entries.
       Each table entry has:
         0 => vvvv vvvv dddd dddd
  	      v = vendor (0 = us)
	      d = vendor-specified device number

	      For vendor 0, current devices are:
	      0 => ROM
	      1 => RAM
	      2 => System Controller version 0 (this specification)
	      3 => IOC version 0 (this specification)

     0x2000 .. 0x23ff is 32 x 32 bit interrupt masks (one for each CPU).
       On reset, all interrupts are disabled for all CPUs.  A 1 signifies the
       CPU wishes to receive the interrupt, a 0 signifies that it wishes to
       ignore the interrupt.

     0x2400 .. 0x2403 is 32 bit field for pending interupts.

     0x2404 .. 0x240f is the programmable interrupt timer.
            1st word => read-only system controller input clock frequency (Hz)
	    2nd word => timer reload value.  When high-half of register is written, it will cause a timer reset.  If this
	                is zero, the timer does not run.  (Default value)
	    3rd word => current timer value.  When this reaches zero, the system controller's interrupt is asserted.
	                and the timer is reset.  A timer reset consists of moving the timer reload value into
			the current timer value register.
